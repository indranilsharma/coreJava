package com.Thread.AdvancedMultithreding.excutaorFramework;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

class FetchDataFromFile extends Thread {

	private final String fileName;

	public FetchDataFromFile(String fileName) {
		this.fileName = fileName;
	}

	@Override
	public void run() {
		System.out.println("Fetching data from " + fileName + " by " + Thread.currentThread().getName());
		try {
			Thread.sleep(10000);
			System.out.println("Read successfully :" + fileName + " by " + Thread.currentThread().getName());
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public String getFileName() {
		return fileName;
	}
}

public class ExecutorFramwork_CachedThreadPool {

	public static void main(String[] args) {

		ThreadPoolExecutor poolExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool();
		for (int i = 0; i < 10; i++) {
			FetchDataFromFile obj = new FetchDataFromFile("FileName :" + i);
			System.out.println("A new file has been added to read : " + obj.getFileName());
			poolExecutor.execute(obj);
		}
		poolExecutor.shutdown();
	}

}
