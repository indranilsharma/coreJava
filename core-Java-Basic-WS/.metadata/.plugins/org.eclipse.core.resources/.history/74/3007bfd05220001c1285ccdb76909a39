package com.Thread.AdvancedMultithreding.Semaphores;

import java.util.concurrent.Semaphore;

class SendingThread extends Thread{
	Semaphore semaphore = null;

	public SendingThread(Semaphore semaphore) {
		this.semaphore = semaphore;
	}

	public void run() {
		while (true) {
			// do something, then signal
			try {
				this.semaphore.acquire();
			} catch (InterruptedException e) {
				e.printStackTrace();
			};
		}
	}
}

class RecevingThread extends Thread{
	 Semaphore semaphore = null;

	  public RecevingThread(Semaphore semaphore){
	    this.semaphore = semaphore;
	  }

	  public void run(){
	    while(true){
	      this.semaphore.release();
	      //receive signal, then do something...
	    }
	  }
}

public class SemaphoreDemo {

	public static void main(String[] args) {
		Semaphore semaphore = new Semaphore(100);

		SendingThread sender = new SendingThread(semaphore);

		RecevingThread receiver = new RecevingThread(semaphore);

		receiver.start();
		sender.start();
	}

}
